user nginx;
worker_processes 1;

error_log /var/log/nginx/error.log warn;
pid /var/run/nginx.pid;

events {
    worker_connections 1024;
}

http {
    limit_req_zone $http_authorization zone=apikey:10m rate=50r/m;
    limit_req_zone $binary_remote_addr zone=address:10m rate=100r/m;

    server {
        listen 80;

        location /status {
            access_log off;
            default_type text/plain;
            add_header Content-Type text/plain;
            return 200 “alive”;
        }

        location / {
            proxy_pass http://host.docker.internal:3000;
        }

        location /api/ {
            # rate limiting
            limit_req zone=apikey burst=10 nodelay;
            limit_req zone=address burst=20 nodelay;

            error_page          503 = @error503;

            # preflight for requests (allow cors)
            add_header          Access-Control-Allow-Methods "POST, GET, PUT, DELETE";
            add_header          Access-Control-Allow-Headers *;
            add_header          Access-Control-Allow-Origin *;
            if ($request_method = OPTIONS) {
                return 204 "";
            }

            # authenticate request
            auth_request        /auth-key;

            error_page 401 = @error401;
            error_page 403 = @error403;

            # get resulting user from authorization
            auth_request_set    $user $upstream_http_authorization;
            #pass the value
            proxy_set_header    X-User $user;
            proxy_set_header    Host   $host;
            proxy_pass          http://api:3000;
        }

        location = /auth-key {
            internal;
            proxy_pass              http://auth:3000/keys/auth;
            proxy_pass_request_body off;
            proxy_set_header        Content-Length "";
            proxy_set_header        X-Original-URI $request_uri;
        }

        location @error401 {
            access_log off;
            default_type application/json;
            add_header Content-Type application/json;
            return 401 '{"ok": false, "result": "Authorization credientials missing"}';
        }

        location @error403 {
            access_log off;
            default_type application/json;
            add_header Content-Type application/json;
            return 403 '{"ok": false, "result": "Invalid Authorization credientials"}';
        }

        location @error503 {
            access_log off;
            default_type application/json;
            add_header Content-Type application/json;
            return 429 '{"ok": false, "result": "Too many requests"}';
        }

    }
}
